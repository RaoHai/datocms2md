"use strict";

require("dotenv/config");

var _docopt = require("docopt");

var _package = _interopRequireDefault(require("../package.json"));

var _command = _interopRequireDefault(require("./dump/command"));

var _command2 = _interopRequireDefault(require("./check/command"));

var _command3 = _interopRequireDefault(require("./wpImport/command"));

var _command4 = _interopRequireDefault(require("./contentfulImport/command"));

var _command5 = _interopRequireDefault(require("./toggleMaintenanceMode/command"));

var _command6 = _interopRequireDefault(require("./createMigrationScript/command"));

var _command7 = _interopRequireDefault(require("./runPendingMigrations/command"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var doc = "\nDatoCMS CLI tool\n\nUsage:\n  dato dump [--watch] [--verbose] [--preview] [--token=<apiToken>] [--environment=<environment>] [--config=<file>]\n  dato new migration <name> [--migrationsDir=<directory>]\n  dato migrate [--source=<environment>] [--destination=<environment>] [--inPlace] [--migrationModel=<apiKey>] [--migrationsDir=<directory>] [--token=<apiToken>]\n  dato maintenance (on|off) [--force] [--token=<apiToken>]\n  dato wp-import --token=<datoApiToken> [--environment=<datoEnvironment>] --wpUrl=<url> --wpUser=<user> --wpPassword=<password>\n  dato contentful-import --datoCmsToken=<apiToken> --contentfulToken=<apiToken> --contentfulSpaceId=<spaceId> [--datoCmsEnvironment=<datoEnvironment>] [--skipContent] [(--includeOnly <contentType>...)]\n  dato check\n  dato -h | --help\n  dato --version\n\nOptions:\n  --migrationsDir=<directory>   Directory containing the migration scripts [default: ./migrations]\n  --migrationModel=<apiKey>     API key of the migration model [default: schema_migration]\n";

(function () {
  var options = (0, _docopt.docopt)(doc, {
    version: _package["default"].version
  });

  if (options.dump) {
    return (0, _command["default"])(options);
  }

  if (options.check) {
    return (0, _command2["default"])(options);
  }

  if (options.maintenance) {
    var on = options.on,
        token = options['--token'],
        force = options['--force'];
    return (0, _command5["default"])({
      activate: on,
      token: token,
      force: force
    });
  }

  if (options["new"] && options.migration) {
    var name = options['<name>'],
        relativeMigrationsDir = options['--migrationsDir'];
    return (0, _command6["default"])({
      name: name,
      relativeMigrationsDir: relativeMigrationsDir
    });
  }

  if (options.migrate) {
    var sourceEnvId = options['--source'],
        destinationEnvId = options['--destination'],
        migrationModelApiKey = options['--migrationModel'],
        _relativeMigrationsDir = options['--migrationsDir'],
        inPlace = options['--inPlace'],
        _token = options['--token'];
    return (0, _command7["default"])({
      sourceEnvId: sourceEnvId,
      destinationEnvId: destinationEnvId,
      inPlace: inPlace,
      migrationModelApiKey: migrationModelApiKey,
      relativeMigrationsDir: _relativeMigrationsDir,
      token: _token
    });
  }

  if (options['wp-import']) {
    var _token2 = options['--token'],
        environment = options['--environment'],
        wpUrl = options['--wpUrl'],
        wpUser = options['--wpUser'],
        wpPassword = options['--wpPassword'];
    return (0, _command3["default"])(_token2, environment, wpUrl, wpUser, wpPassword);
  }

  if (options['contentful-import']) {
    var contentfulToken = options['--contentfulToken'],
        contentfulSpaceId = options['--contentfulSpaceId'],
        datoCmsToken = options['--datoCmsToken'],
        datoCmsEnvironment = options['--datoCmsEnvironment'],
        skipContent = options['--skipContent'],
        includeOnly = options['--includeOnly'],
        contentType = options['<contentType>'];
    return (0, _command4["default"])({
      contentfulToken: contentfulToken,
      contentfulSpaceId: contentfulSpaceId,
      datoCmsToken: datoCmsToken,
      datoCmsEnvironment: datoCmsEnvironment,
      skipContent: skipContent,
      contentType: includeOnly ? contentType : false
    });
  }

  return false;
})();