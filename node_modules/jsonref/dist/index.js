"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = exports.scope = void 0;
const errors_1 = require("./errors");
const meta = require("./meta");
const ref_1 = require("./ref");
__exportStar(require("./errors"), exports);
var meta_1 = require("./meta");
Object.defineProperty(exports, "getMeta", { enumerable: true, get: function () { return meta_1.getMeta; } });
Object.defineProperty(exports, "isAnnotated", { enumerable: true, get: function () { return meta_1.isAnnotated; } });
Object.defineProperty(exports, "isRef", { enumerable: true, get: function () { return meta_1.isRef; } });
Object.defineProperty(exports, "normalize", { enumerable: true, get: function () { return meta_1.normalize; } });
Object.defineProperty(exports, "normalizeUri", { enumerable: true, get: function () { return meta_1.normalizeUri; } });
var pointer_1 = require("./pointer");
Object.defineProperty(exports, "pointer", { enumerable: true, get: function () { return pointer_1.resolve; } });
__exportStar(require("./rebase"), exports);
function scope(data) {
    if (meta.isAnnotated(data)) {
        return meta.getMeta(data).scope;
    }
}
exports.scope = scope;
async function parse(dataOrUri, opts) {
    let obj;
    if (!opts || !opts.scope) {
        throw new Error('No scope');
    }
    if (typeof dataOrUri === 'string') {
        if (!opts.retriever) {
            throw new Error('No retriever');
        }
        const uri = new URL(dataOrUri).toString();
        obj = await opts.retriever(uri);
        if (!opts.registry) {
            opts.registry = {};
        }
        if (uri !== opts.scope) {
            opts.registry[meta.normalizeUri(uri)] = obj;
        }
    }
    else if (dataOrUri === null || typeof dataOrUri !== 'object') {
        throw new TypeError('Bad data');
    }
    else {
        obj = dataOrUri;
    }
    if (meta.isAnnotated(obj)) {
        return obj;
    }
    else {
        meta.annotate(obj, opts);
        if (meta.getMeta(obj).refs.size > 0) {
            const missingRefs = meta.missingRefs(obj);
            if (missingRefs.length) {
                if (!opts.retriever) {
                    throw new Error('No retriever');
                }
                const registry = meta.getMeta(obj).registry;
                const errors = [];
                for (let r of missingRefs) {
                    try {
                        registry[r] = await opts.retriever(r);
                    }
                    catch (e) {
                        errors.push(new errors_1.RetrieverError(r, e));
                    }
                }
                if (errors.length) {
                    throw new errors_1.ParserError(meta.getMeta(obj).scope, 'retriever', errors);
                }
            }
            return ref_1.resolve(obj, opts);
        }
        else {
            return obj;
        }
    }
}
exports.parse = parse;
//# sourceMappingURL=index.js.map