"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _datoLinkItemTypeFor = _interopRequireDefault(require("./datoLinkItemTypeFor"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var datoValidatorsForString = function datoValidatorsForString(_ref) {
  var field = _ref.field;
  var validators = {};

  if (field.required) {
    validators.required = {};
  }

  var _iterator = _createForOfIteratorHelper(field.validations),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var validation = _step.value;

      if (Object.prototype.hasOwnProperty.call(validation, 'size')) {
        validators.length = {};

        if (validation.size.min && validation.size.min === validation.size.max) {
          validators.length.eq = validation.size.min.toString();
        } else {
          if (validation.size.min) {
            validators.length.min = validation.size.min.toString();
          }

          if (validation.size.max) {
            validators.length.max = validation.size.max.toString();
          }
        }
      }

      if (Object.prototype.hasOwnProperty.call(validation, 'unique')) {
        validators.unique = {};
      }

      if (Object.prototype.hasOwnProperty.call(validation, 'in')) {
        validators["enum"] = {
          values: validation["in"]
        };
      }

      if (Object.prototype.hasOwnProperty.call(validation, 'regexp')) {
        validators.format = {
          customPattern: validation.regexp.pattern
        };
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return validators;
};

var datoValidatorsForInteger = function datoValidatorsForInteger(_ref2) {
  var field = _ref2.field;
  var validators = {};

  if (field.required) {
    validators.required = {};
  }

  var _iterator2 = _createForOfIteratorHelper(field.validations),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var validation = _step2.value;

      if (Object.prototype.hasOwnProperty.call(validation, 'range')) {
        validators.numberRange = {};

        if (validation.range.min) {
          validators.numberRange.min = validation.range.min.toString();
        }

        if (validation.range.max) {
          validators.numberRange.max = validation.range.max.toString();
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return validators;
};

var datoValidatorsForDate = function datoValidatorsForDate(_ref3) {
  var field = _ref3.field;
  var validators = {};

  if (field.required) {
    validators.required = {};
  }

  var _iterator3 = _createForOfIteratorHelper(field.validations),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var validation = _step3.value;

      if (Object.prototype.hasOwnProperty.call(validation, 'dateRange')) {
        validators.dateRange = {
          min: validation.dateRange.min,
          max: validation.dateRange.max
        };
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return validators;
};

var datoValidatorsForLocation = function datoValidatorsForLocation(_ref4) {
  var field = _ref4.field;
  var validators = {};

  if (field.required) {
    validators.required = {};
  }

  return validators;
};

var datoValidatorsForObject = function datoValidatorsForObject(_ref5) {
  var field = _ref5.field;
  var validators = {};

  if (field.required) {
    validators.required = {};
  }

  return validators;
};

var datoValidatorsForLink = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref6) {
    var field, itemTypes, validators;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            field = _ref6.field, itemTypes = _ref6.itemTypes;
            validators = {
              itemItemType: {
                itemTypes: (0, _datoLinkItemTypeFor["default"])({
                  field: field,
                  itemTypes: itemTypes
                })
              }
            };

            if (field.required) {
              validators.required = {};
            }

            return _context.abrupt("return", validators);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function datoValidatorsForLink(_x) {
    return _ref7.apply(this, arguments);
  };
}();

var datoValidatorsForAsset = function datoValidatorsForAsset(_ref8) {
  var field = _ref8.field;
  var validators = {};

  if (field.required) {
    validators.required = {};
  }

  var _iterator4 = _createForOfIteratorHelper(field.validations),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var validation = _step4.value;

      if (Object.prototype.hasOwnProperty.call(validation, 'assetFileSize')) {
        if (Object.prototype.hasOwnProperty.call(validation.assetFileSize, 'min')) {
          validators.file_size = _objectSpread(_objectSpread({}, validators.file_size), {}, {
            min_value: validation.assetFileSize.min,
            min_unit: 'B'
          });
        }

        if (Object.prototype.hasOwnProperty.call(validation.assetFileSize, 'max')) {
          validators.file_size = _objectSpread(_objectSpread({}, validators.file_size), {}, {
            max_value: validation.assetFileSize.max,
            max_unit: 'B'
          });
        }
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  return validators;
};

var datoValidatorsForArray = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref9) {
    var field, itemTypes, validators, _iterator5, _step5, validation;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            field = _ref9.field, itemTypes = _ref9.itemTypes;
            validators = {};

            if (field.items.type === 'Link' && field.items.linkType === 'Entry') {
              validators = {
                itemsItemType: {
                  itemTypes: (0, _datoLinkItemTypeFor["default"])({
                    field: field.items,
                    itemTypes: itemTypes
                  })
                }
              };
            }

            _iterator5 = _createForOfIteratorHelper(field.validations);

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                validation = _step5.value;

                if (Object.prototype.hasOwnProperty.call(validation, 'size')) {
                  validators.size = {};

                  if (validation.size.min && validation.size.min === validation.size.max) {
                    validators.size.eq = validation.size.min.toString();
                  } else {
                    if (validation.size.min) {
                      validators.size.min = validation.size.min.toString();
                    }

                    if (validation.size.max) {
                      validators.size.max = validation.size.max.toString();
                    }
                  }
                }
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }

            return _context2.abrupt("return", validators);

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function datoValidatorsForArray(_x2) {
    return _ref10.apply(this, arguments);
  };
}();

var _default = /*#__PURE__*/function () {
  var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref11) {
    var field, itemTypes;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            field = _ref11.field, itemTypes = _ref11.itemTypes;
            _context3.t0 = field.type;
            _context3.next = _context3.t0 === 'Symbol' ? 4 : _context3.t0 === 'Text' ? 4 : _context3.t0 === 'Integer' ? 5 : _context3.t0 === 'Number' ? 5 : _context3.t0 === 'Date' ? 6 : _context3.t0 === 'Location' ? 7 : _context3.t0 === 'Object' ? 8 : _context3.t0 === 'Link' ? 9 : _context3.t0 === 'Array' ? 15 : _context3.t0 === 'Boolean' ? 16 : 16;
            break;

          case 4:
            return _context3.abrupt("return", datoValidatorsForString({
              field: field
            }));

          case 5:
            return _context3.abrupt("return", datoValidatorsForInteger({
              field: field
            }));

          case 6:
            return _context3.abrupt("return", datoValidatorsForDate({
              field: field
            }));

          case 7:
            return _context3.abrupt("return", datoValidatorsForLocation({
              field: field
            }));

          case 8:
            return _context3.abrupt("return", datoValidatorsForObject({
              field: field
            }));

          case 9:
            _context3.t1 = field.linkType;
            _context3.next = _context3.t1 === 'Entry' ? 12 : _context3.t1 === 'Asset' ? 13 : 14;
            break;

          case 12:
            return _context3.abrupt("return", datoValidatorsForLink({
              field: field,
              itemTypes: itemTypes
            }));

          case 13:
            return _context3.abrupt("return", datoValidatorsForAsset({
              field: field
            }));

          case 14:
            return _context3.abrupt("return", {});

          case 15:
            return _context3.abrupt("return", datoValidatorsForArray({
              field: field,
              itemTypes: itemTypes
            }));

          case 16:
            return _context3.abrupt("return", {});

          case 17:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function (_x3) {
    return _ref12.apply(this, arguments);
  };
}();

exports["default"] = _default;