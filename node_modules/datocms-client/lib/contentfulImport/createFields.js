"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ora = _interopRequireDefault(require("ora"));

var _progress = _interopRequireDefault(require("./progress"));

var _toApiKey = require("./toApiKey");

var _datoFieldTypeFor = _interopRequireDefault(require("./datoFieldTypeFor"));

var _datoLinkItemTypeFor = _interopRequireDefault(require("./datoLinkItemTypeFor"));

var _delay = _interopRequireDefault(require("./delay"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var itemTypes, datoClient, contentfulData, spinner, contentTypes, fieldSize, progress, fieldsMapping, _iterator, _step, _loop;

    return regeneratorRuntime.wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            itemTypes = _ref.itemTypes, datoClient = _ref.datoClient, contentfulData = _ref.contentfulData;
            spinner = (0, _ora["default"])('').start();
            contentTypes = contentfulData.contentTypes;
            fieldSize = contentTypes.map(function (contentType) {
              return contentType.fields.length;
            }).reduce(function (acc, length) {
              return acc + length;
            }, 0);
            progress = new _progress["default"](fieldSize, 'Creating fields');
            spinner.text = progress.tick();
            fieldsMapping = {};
            _iterator = _createForOfIteratorHelper(contentTypes);
            _context2.prev = 8;
            _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop() {
              var contentType, contentTypeApiKey, itemType, _iterator2, _step2, contentfulField, position, validators, fieldAttributes, datoField;

              return regeneratorRuntime.wrap(function _loop$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      contentType = _step.value;
                      contentTypeApiKey = (0, _toApiKey.toItemApiKey)(contentType.sys.id);
                      fieldsMapping[contentTypeApiKey] = [];
                      itemType = itemTypes.find(function (iT) {
                        return iT.apiKey === contentTypeApiKey;
                      });
                      _iterator2 = _createForOfIteratorHelper(contentType.fields);
                      _context.prev = 5;

                      _iterator2.s();

                    case 7:
                      if ((_step2 = _iterator2.n()).done) {
                        _context.next = 38;
                        break;
                      }

                      contentfulField = _step2.value;
                      position = contentType.fields.indexOf(contentfulField);
                      validators = {};

                      if (contentfulField.type === 'Link' && contentfulField.linkType === 'Entry') {
                        validators = {
                          itemItemType: {
                            itemTypes: (0, _datoLinkItemTypeFor["default"])({
                              itemTypes: itemTypes,
                              field: contentfulField
                            })
                          }
                        };
                      }

                      if (contentfulField.type === 'Array' && contentfulField.items.type === 'Link' && contentfulField.items.linkType === 'Entry') {
                        validators = {
                          itemsItemType: {
                            itemTypes: (0, _datoLinkItemTypeFor["default"])({
                              itemTypes: itemTypes,
                              field: contentfulField.items
                            })
                          }
                        };
                      }

                      fieldAttributes = {
                        label: contentfulField.name,
                        fieldType: (0, _datoFieldTypeFor["default"])(contentfulField),
                        localized: contentfulField.localized,
                        apiKey: (0, _toApiKey.toFieldApiKey)(contentfulField.id),
                        position: position,
                        validators: validators
                      };

                      if (contentfulField.id === contentType.displayField && contentfulField.type === 'Symbol') {
                        fieldAttributes.appearance = {
                          editor: 'single_line',
                          parameters: {
                            heading: true
                          },
                          addons: []
                        };
                      }

                    case 15:
                      if (!true) {
                        _context.next = 36;
                        break;
                      }

                      _context.prev = 16;
                      _context.next = 19;
                      return datoClient.fields.create(itemType.id, fieldAttributes);

                    case 19:
                      datoField = _context.sent;
                      spinner.text = progress.tick();
                      fieldsMapping[contentTypeApiKey].push(datoField);
                      return _context.abrupt("break", 36);

                    case 25:
                      _context.prev = 25;
                      _context.t0 = _context["catch"](16);

                      if (!(!_context.t0.body || !_context.t0.body.data || !_context.t0.body.data.some(function (d) {
                        return d.id === 'BATCH_DATA_VALIDATION_IN_PROGRESS';
                      }))) {
                        _context.next = 32;
                        break;
                      }

                      spinner.fail(_typeof(_context.t0) === 'object' ? _context.t0.message : _context.t0);
                      process.exit();
                      _context.next = 34;
                      break;

                    case 32:
                      _context.next = 34;
                      return (0, _delay["default"])(1000);

                    case 34:
                      _context.next = 15;
                      break;

                    case 36:
                      _context.next = 7;
                      break;

                    case 38:
                      _context.next = 43;
                      break;

                    case 40:
                      _context.prev = 40;
                      _context.t1 = _context["catch"](5);

                      _iterator2.e(_context.t1);

                    case 43:
                      _context.prev = 43;

                      _iterator2.f();

                      return _context.finish(43);

                    case 46:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _loop, null, [[5, 40, 43, 46], [16, 25]]);
            });

            _iterator.s();

          case 11:
            if ((_step = _iterator.n()).done) {
              _context2.next = 15;
              break;
            }

            return _context2.delegateYield(_loop(), "t0", 13);

          case 13:
            _context2.next = 11;
            break;

          case 15:
            _context2.next = 20;
            break;

          case 17:
            _context2.prev = 17;
            _context2.t1 = _context2["catch"](8);

            _iterator.e(_context2.t1);

          case 20:
            _context2.prev = 20;

            _iterator.f();

            return _context2.finish(20);

          case 23:
            spinner.succeed();
            return _context2.abrupt("return", fieldsMapping);

          case 25:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee, null, [[8, 17, 20, 23]]);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports["default"] = _default;