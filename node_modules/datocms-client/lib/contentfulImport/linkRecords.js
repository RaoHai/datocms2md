"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ora = _interopRequireDefault(require("ora"));

var _progress = _interopRequireDefault(require("./progress"));

var _toApiKey = require("./toApiKey");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _require = require('humps'),
    camelize = _require.camelize;

var _default = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var fieldsMapping, datoClient, contentfulData, contentfulRecordMap, spinner, entries, progress, recordsToPublish, _iterator, _step, _loop;

    return regeneratorRuntime.wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            fieldsMapping = _ref.fieldsMapping, datoClient = _ref.datoClient, contentfulData = _ref.contentfulData, contentfulRecordMap = _ref.contentfulRecordMap;
            spinner = (0, _ora["default"])('').start();
            entries = contentfulData.entries;
            progress = new _progress["default"](entries.length, 'Linking records');
            recordsToPublish = [];
            spinner.text = progress.tick();
            _iterator = _createForOfIteratorHelper(entries);
            _context2.prev = 7;
            _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop() {
              var entry, contentType, contentTypeApiKey, datoItemId, itemTypeFields, recordAttributes;
              return regeneratorRuntime.wrap(function _loop$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      entry = _step.value;
                      contentType = entry.sys.contentType;
                      contentTypeApiKey = (0, _toApiKey.toItemApiKey)(contentType.sys.id);
                      datoItemId = contentfulRecordMap[entry.sys.id];
                      itemTypeFields = fieldsMapping[contentTypeApiKey];
                      recordAttributes = Object.entries(entry.fields).reduce(function (outerAcc, _ref3) {
                        var _ref4 = _slicedToArray(_ref3, 2),
                            option = _ref4[0],
                            value = _ref4[1];

                        var apiKey = (0, _toApiKey.toFieldApiKey)(option);
                        var field = itemTypeFields.find(function (itemTypefield) {
                          return itemTypefield.apiKey === apiKey;
                        });

                        if (field.fieldType !== 'link' && field.fieldType !== 'links') {
                          return outerAcc;
                        }

                        if (field.localized) {
                          var localizedValue = Object.keys(value).reduce(function (innerAcc, locale) {
                            var innerValue = value[locale];

                            if (field.fieldType === 'link') {
                              return Object.assign(innerAcc, _defineProperty({}, locale, contentfulRecordMap[innerValue.sys.id]));
                            }

                            return Object.assign(innerAcc, _defineProperty({}, locale, innerValue.filter(function (link) {
                              return contentfulRecordMap[link.sys.id];
                            }).map(function (link) {
                              return contentfulRecordMap[link.sys.id];
                            })));
                          }, {});
                          var fallbackValues = contentfulData.locales.reduce(function (accLocales, locale) {
                            return Object.assign(accLocales, _defineProperty({}, locale, localizedValue[contentfulData.defaultLocale]));
                          }, {});
                          return Object.assign(outerAcc, _defineProperty({}, camelize(apiKey), _objectSpread(_objectSpread({}, fallbackValues), localizedValue)));
                        }

                        var innerValue = value[contentfulData.defaultLocale];

                        if (field.fieldType === 'link') {
                          return Object.assign(outerAcc, _defineProperty({}, camelize(apiKey), contentfulRecordMap[innerValue.sys.id]));
                        }

                        return Object.assign(outerAcc, _defineProperty({}, camelize(apiKey), innerValue.filter(function (link) {
                          return contentfulRecordMap[link.sys.id];
                        }).map(function (link) {
                          return contentfulRecordMap[link.sys.id];
                        })));
                      }, {});
                      _context.prev = 6;

                      if (!(Object.entries(recordAttributes).length > 0)) {
                        _context.next = 11;
                        break;
                      }

                      _context.next = 10;
                      return datoClient.items.update(datoItemId, recordAttributes);

                    case 10:
                      if (entry.sys.publishedVersion) {
                        recordsToPublish.push(datoItemId);
                      }

                    case 11:
                      spinner.text = progress.tick();
                      _context.next = 18;
                      break;

                    case 14:
                      _context.prev = 14;
                      _context.t0 = _context["catch"](6);
                      spinner.fail(_typeof(_context.t0) === 'object' ? _context.t0.message : _context.t0);
                      process.exit();

                    case 18:
                      spinner.text = progress.tick();

                    case 19:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _loop, null, [[6, 14]]);
            });

            _iterator.s();

          case 10:
            if ((_step = _iterator.n()).done) {
              _context2.next = 14;
              break;
            }

            return _context2.delegateYield(_loop(), "t0", 12);

          case 12:
            _context2.next = 10;
            break;

          case 14:
            _context2.next = 19;
            break;

          case 16:
            _context2.prev = 16;
            _context2.t1 = _context2["catch"](7);

            _iterator.e(_context2.t1);

          case 19:
            _context2.prev = 19;

            _iterator.f();

            return _context2.finish(19);

          case 22:
            spinner.succeed();
            return _context2.abrupt("return", recordsToPublish);

          case 24:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee, null, [[7, 16, 19, 22]]);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports["default"] = _default;